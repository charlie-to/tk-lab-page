---
import SlideLayout from '@layouts/slide_layout.astro'
// images

import ghost_teacher from './Images/ghost_teacher.png'
---

<SlideLayout>
    <div class="slide-content">
        <div class="textArea"
            style="font-size: max(32px, 2.8vw); text-align: center; display: flex; justify-content: center; align-items: center; flex-direction: column; margin-top: max(120px, 10vw);">
            <div class="text" style="opacity: 0; margin: auto;">
                <div style="margin-bottom: 10px;">情報量が多すぎるインターフェースは</div>
                <div>ユーザーの<span class="white">見間違い</span>や<span class="white">操作ミス</span>の原因になってしまいます。</div>
            </div>
            <div class="text" style="opacity: 0; margin: auto; margin-top: max(80px, 6vw);">
                <div style="margin-bottom: 10px;">まずは、<span class="white">情報量</span>を<span class="white">必要最低限</span>に減らすこと。</div>
            </div>
            <div class="text" style="opacity: 0; margin: auto; margin-top: max(80px, 6vw);">
                もしそれが不可能であれば・・・
            </div>
        </div>
    
        <img src={ghost_teacher.src} alt="ghost teacher" class="ghost" style="width: max(150px, 12vw); opacity: 0; position: absolute; top: 15%; left: 10%;" />
    </div>

    <script is:inline>
        window.addEventListener('DOMContentLoaded', () => {
            const ghost = document.querySelector('.ghost');
            const elements = document.querySelectorAll('.text, .image'); // textとimageクラスを持つ全ての要素を取得

            setTimeout(() => {
                elements.forEach(element => {
                    element.style.transition = "opacity 2s ease-in-out";
                    element.style.opacity = 1;
                });
                ghost.style.transition = "opacity 2s ease-in-out";
                ghost.style.opacity = 1;
            }, 500);

            setTimeout(() => {
                elements.forEach(element => {
                    element.style.opacity = 0;
                });
                ghost.style.opacity = 0;
            }, 12000);

            setTimeout(() => {
                const nextPageUrl = '../slide29/index.html';

                // 次のページを読み込む
                window.fetch(nextPageUrl).then((response) => {
                    // 読み込みが完了したら画面遷移を行う
                    window.location.href = nextPageUrl;
                }); // -> さらに廊下を進んでいくと
            }, 14000);
        });
    </script>
</SlideLayout>